<script type="text/javascript">
    var todo = {}
    var links = []
    var done = false
    var nodes = {}
    d3JSON = function(){
        
        todo = {};
        links = [];
        done = false;
        nodes = {}
        console.log("CALLED AGAIN")
        console.log("##links", links)
        console.log("##todo", todo)
        let url = "/users/repo/data?repo=" + "<%= @current_repo %>" + "&start_date=" + "<%= @start_date %>" +  "&end_date=" + "<%= @end_date %>";
        console.log(url)
        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: url,
            dataType: 'json',
            success: function (json) {
                console.log("json",json)
                doLayer(json)
            },
            error: function (result) {
                error();
            }
        });
    }

    function discoverLinks(json){
        for (var i = 0; i < json.parents.length; i++) 
        {
            links.push({source: json.sha, target: json.parents[i].sha})
            todo[json.parents[i].sha] = true
        }
        todo[json.sha] = false
    }

    function doLayer(json) {
        for(var i=0;i<json.length;i++){
            todo[json[i].sha] = true;
            discoverLinks(json[i]);
        }
        finished()
    }

    function finished() 
    {
        console.log("#nodes",nodes)
        console.log("links",links)
        links.forEach(function(link) {
        link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
        link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
        });

        nodes = d3.values(nodes)
        
        console.log("nodes:",nodes)

        var w = 500,
            h = 150,
            r = 10,
            fill = d3.scaleOrdinal(d3.schemeCategory20);

        var vis = d3.select("#chart")
            .attr("width", w)
            .attr("height", h);
                                
        var force = d3.forceSimulation(nodes)
            .force("charge",d3.forceManyBody(-120))
            .force("link", d3.forceLink(links).distance(200))
            .force("size",d3.forceX([w]))
            .force("size",d3.forceY([h]));


        var link = vis.selectAll("line.link")
        .data(links)
        .enter()
        .append("svg:line")
        .attr("class", "link")
        .style("stroke-width", function(d) { return Math.sqrt(d.value); })
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

        var node = vis.selectAll("circle.node")
        .data(nodes, function(d) { 
            console.log("!!!!!", d)    
            return d.values; })
        .enter()
        .append("svg:circle")
        .attr("class", "node")
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; })
        .attr("r", r)
        .style("fill", function(d) { return fill(d.group); })
        
        nodes.forEach(function(d) {
            if(d.index == 0) {
                d.x = w/2, d.y = h/2;
                d.fixed = true;
            }
        });

        vis.style("opacity", 1)
            .transition()
            .duration(1000);

        var texts = vis.selectAll("text.label")
                .data(nodes)
                .enter()
                .append("text")
                .text(function(d) {  
                    if(d.name.length > 10)
                        return d.name.substring(0,10)+'...';
                    else
                        return d.name;                       
                })
                .style("text-anchor", "middle")
                .style("fill", "#555")
                .style("font-family", "Arial")
                .style("font-size", 11)
                .style("alignment-baseline", "text-bottom")

        force.on("tick", function() {
            link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

            node.attr("cx", function(d) { return d.x = 0.2 + Math.max(r, Math.min(w - r, d.x)); })
                .attr("cy", function(d)  { 
                    return d.y = Math.max(r, Math.min(h - (2 * r) , d.y)); });
                
            texts.attr("transform", function(d) {
                return "translate(" + d.x + "," + h + ")";
            });
        
        });
    }
</script>